# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, QThread, pyqtSignal
import sys, time


class Ui_MainWindow(object):
#class Window(QtWidgets.QMainWindow):

    def setupUi(self, MainWindow):

        # QThread things


        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(635, 651)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.title = QtWidgets.QLabel(self.centralwidget)
        self.title.setGeometry(QtCore.QRect(30, 20, 561, 51))
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(24)
        font.setBold(False)
        font.setWeight(50)
        self.title.setFont(font)
        self.title.setObjectName("title")
        self.settings_groupbox = QtWidgets.QGroupBox(self.centralwidget)
        self.settings_groupbox.setGeometry(QtCore.QRect(30, 170, 281, 421))
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei")
        self.settings_groupbox.setFont(font)
        self.settings_groupbox.setObjectName("settings_groupbox")
        self.gridLayoutWidget_2 = QtWidgets.QWidget(self.settings_groupbox)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(10, 50, 261, 260))
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")
        self.column_layout = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.column_layout.setContentsMargins(0, 0, 0, 0)
        self.column_layout.setObjectName("column_layout")
        self.genres_check = QtWidgets.QCheckBox(self.gridLayoutWidget_2)
        self.genres_check.setObjectName("genres_check")
        self.column_layout.addWidget(self.genres_check, 2, 1, 1, 1)
        self.avgrating_check = QtWidgets.QCheckBox(self.gridLayoutWidget_2)
        self.avgrating_check.setObjectName("avgrating_check")
        self.column_layout.addWidget(self.avgrating_check, 3, 0, 1, 1)
        self.backdrop_check = QtWidgets.QCheckBox(self.gridLayoutWidget_2)
        self.backdrop_check.setObjectName("backdrop_check")
        self.column_layout.addWidget(self.backdrop_check, 4, 1, 1, 1)
        self.filmpage_check = QtWidgets.QCheckBox(self.gridLayoutWidget_2)
        self.filmpage_check.setObjectName("filmpage_check")
        self.column_layout.addWidget(self.filmpage_check, 4, 0, 1, 1)
        self.persrating_check = QtWidgets.QCheckBox(self.gridLayoutWidget_2)
        self.persrating_check.setObjectName("persrating_check")
        self.column_layout.addWidget(self.persrating_check, 3, 1, 1, 1)
        self.poster_check = QtWidgets.QCheckBox(self.gridLayoutWidget_2)
        self.poster_check.setObjectName("poster_check")
        self.column_layout.addWidget(self.poster_check, 5, 0, 1, 1)
        self.title_check = QtWidgets.QCheckBox(self.gridLayoutWidget_2)
        self.title_check.setEnabled(False)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.title_check.setFont(font)
        self.title_check.setWhatsThis("")
        self.title_check.setCheckable(True)
        self.title_check.setChecked(True)
        self.title_check.setTristate(False)
        self.title_check.setObjectName("title_check")
        self.column_layout.addWidget(self.title_check, 0, 0, 1, 1)
        self.description_check = QtWidgets.QCheckBox(self.gridLayoutWidget_2)
        self.description_check.setObjectName("description_check")
        self.column_layout.addWidget(self.description_check, 2, 0, 1, 1)
        self.director_check = QtWidgets.QCheckBox(self.gridLayoutWidget_2)
        self.director_check.setChecked(True)
        self.director_check.setObjectName("director_check")
        self.column_layout.addWidget(self.director_check, 1, 0, 1, 1)
        self.year_check = QtWidgets.QCheckBox(self.gridLayoutWidget_2)
        self.year_check.setChecked(True)
        self.year_check.setObjectName("year_check")
        self.column_layout.addWidget(self.year_check, 0, 1, 1, 1)
        self.cast_check = QtWidgets.QCheckBox(self.gridLayoutWidget_2)
        self.cast_check.setObjectName("cast_check")
        self.column_layout.addWidget(self.cast_check, 1, 1, 1, 1)
        self.gridLayoutWidget = QtWidgets.QWidget(self.settings_groupbox)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 370, 261, 42))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.fileformat_layout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.fileformat_layout.setContentsMargins(0, 0, 0, 0)
        self.fileformat_layout.setObjectName("fileformat_layout")
        self.csv_button = QtWidgets.QRadioButton(self.gridLayoutWidget)
        self.csv_button.setObjectName("csv_button")
        self.fileformat_layout.addWidget(self.csv_button, 0, 0, 1, 1)
        self.txt_button = QtWidgets.QRadioButton(self.gridLayoutWidget)
        self.txt_button.setObjectName("txt_button")
        self.fileformat_layout.addWidget(self.txt_button, 0, 2, 1, 1)
        self.json_button = QtWidgets.QRadioButton(self.gridLayoutWidget)
        self.json_button.setCheckable(True)
        self.json_button.setChecked(True)
        self.json_button.setObjectName("json_button")
        self.fileformat_layout.addWidget(self.json_button, 0, 1, 1, 1)
        self.settings_label = QtWidgets.QLabel(self.settings_groupbox)
        self.settings_label.setGeometry(QtCore.QRect(10, 20, 261, 21))
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei")
        self.settings_label.setFont(font)
        self.settings_label.setObjectName("settings_label")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.settings_groupbox)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 320, 261, 44))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.enable_button = QtWidgets.QPushButton(self.horizontalLayoutWidget, clicked= lambda : self.pressed_it('enable_all'))
        self.enable_button.setObjectName("enable_button")
        self.horizontalLayout.addWidget(self.enable_button)
        self.disable_button = QtWidgets.QPushButton(self.horizontalLayoutWidget, clicked= lambda : self.pressed_it('disable_all'))
        self.disable_button.setObjectName("disable_button")
        self.horizontalLayout.addWidget(self.disable_button)
        self.url_groupbox = QtWidgets.QGroupBox(self.centralwidget)
        self.url_groupbox.setGeometry(QtCore.QRect(30, 80, 581, 81))
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei")
        self.url_groupbox.setFont(font)
        self.url_groupbox.setObjectName("url_groupbox")
        self.url_line = QtWidgets.QLineEdit(self.url_groupbox)
        self.url_line.setGeometry(QtCore.QRect(20, 40, 541, 21))
        self.url_line.setObjectName("url_line")
        self.url_label = QtWidgets.QLabel(self.url_groupbox)
        self.url_label.setGeometry(QtCore.QRect(20, 20, 371, 16))
        self.url_label.setObjectName("url_label")
        self.leftline = QtWidgets.QFrame(self.centralwidget)
        self.leftline.setGeometry(QtCore.QRect(0, 10, 20, 601))
        self.leftline.setFrameShape(QtWidgets.QFrame.VLine)
        self.leftline.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.leftline.setObjectName("leftline")
        self.results_groupbox = QtWidgets.QGroupBox(self.centralwidget)
        self.results_groupbox.setGeometry(QtCore.QRect(320, 170, 291, 421))
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei")
        self.results_groupbox.setFont(font)
        self.results_groupbox.setObjectName("results_groupbox")
        self.tableWidget = QtWidgets.QTableWidget(self.results_groupbox)
        self.tableWidget.setGeometry(QtCore.QRect(10, 20, 271, 171))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.textBrowser = QtWidgets.QTextBrowser(self.results_groupbox)
        self.textBrowser.setGeometry(QtCore.QRect(10, 200, 271, 111))
        self.textBrowser.setObjectName("textBrowser")
        self.progressBar = QtWidgets.QProgressBar(self.results_groupbox)
        self.progressBar.setGeometry(QtCore.QRect(10, 320, 271, 31))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.scrapeButton = QtWidgets.QPushButton(self.results_groupbox, clicked= lambda : self.init_scrape())
        self.scrapeButton.setGeometry(QtCore.QRect(10, 360, 271, 51))
        self.scrapeButton.setObjectName("scrapeButton")
        self.bottomline = QtWidgets.QFrame(self.centralwidget)
        self.bottomline.setGeometry(QtCore.QRect(10, 600, 621, 20))
        self.bottomline.setFrameShape(QtWidgets.QFrame.HLine)
        self.bottomline.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.bottomline.setObjectName("bottomline")
        self.topline = QtWidgets.QFrame(self.centralwidget)
        self.topline.setGeometry(QtCore.QRect(10, 0, 621, 20))
        self.topline.setFrameShape(QtWidgets.QFrame.HLine)
        self.topline.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.topline.setObjectName("topline")
        self.rightline = QtWidgets.QFrame(self.centralwidget)
        self.rightline.setGeometry(QtCore.QRect(620, 10, 20, 601))
        self.rightline.setFrameShape(QtWidgets.QFrame.VLine)
        self.rightline.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.rightline.setObjectName("rightline")
        self.exit_button = QtWidgets.QPushButton(self.centralwidget, clicked= lambda : self.pressed_it('exit'))
        #self.exit_button.clicked.connect(self.close())
        self.exit_button.setGeometry(QtCore.QRect(520, 30, 81, 41))
        self.exit_button.setObjectName("exit_button")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 635, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def pressed_it(self, *arg):
        if arg[0] == 'exit':
            MainWindow.close()

        if arg[0] == 'enable_all':
            for i in range(self.column_layout.count()):
                check = self.column_layout.itemAt(i).widget()
                check.setChecked(True)

        elif arg[0] == 'disable_all':
            for i in range(self.column_layout.count()):
                check = self.column_layout.itemAt(i).widget()
                if check.isEnabled() == True:
                    check.setChecked(False)

    def init_scrape(self, *arg):
        global status
        # enables everything and stops scrape if button is pressed while cancel
        if self.scrapeButton.text() == 'Cancel':
            # stop the scraping process
            status = False
            self.textBrowser.append('Cancelling scrape process...')

            #time.sleep(3)

            self.url_line.setEnabled(True)
            self.enable_button.setEnabled(True)
            self.disable_button.setEnabled(True)
            for i in range(self.column_layout.count()):
                check = self.column_layout.itemAt(i).widget()
                check.setEnabled(True)
            self.title_check.setEnabled(False)

            for i in range(self.fileformat_layout.count()):
                format = self.fileformat_layout.itemAt(i).widget()
                format.setEnabled(True)
            self.scrapeButton.setText('Start scraping')

            self.textBrowser.append('Scrape process was aborted.')

        # locks everything and starts scrape if button is pressed normally
        else:
            # get url and lock the line
            url = self.url_line.text()
            self.url_line.setEnabled(False)

            # get the boolean value of all checks and lock them
            check_dict = dict()
            for i in range(self.column_layout.count()):
                check = self.column_layout.itemAt(i).widget()
                check_dict[check.text()] = check.isChecked()
                check.setEnabled(False)

            # get the format
            for i in range(self.fileformat_layout.count()):
                format = self.fileformat_layout.itemAt(i).widget()
                if format.isChecked() == True:
                    final_format = format.text()
                format.setEnabled(False)

            # lock both enable buttons
            self.enable_button.setEnabled(False)
            self.disable_button.setEnabled(False)

            # change button to cancel
            self.scrapeButton.setText('Cancel')

            # start the scraping process
            #status = True
            #self.start_scrape(url, check_dict, final_format, status)
            self.runLongTask()

    def start_scrape(self, url, check_dict, final_format):
        self.textBrowser.append('Starting scraping process...')

        while getattr(t, 'status', True):
            print('scrape')
            time.sleep(1)
        print('stopped')

        # check url
        # start scraping
        #

        return

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.title.setText(_translate("MainWindow", "Letterboxd List Scraper"))
        self.settings_groupbox.setTitle(_translate("MainWindow", "Settings"))
        self.genres_check.setText(_translate("MainWindow", "Genres"))
        self.avgrating_check.setText(_translate("MainWindow", "Average rating"))
        self.backdrop_check.setText(_translate("MainWindow", "Backdrop URL"))
        self.filmpage_check.setText(_translate("MainWindow", "Filmpage URL"))
        self.persrating_check.setText(_translate("MainWindow", "Personal rating"))
        self.poster_check.setText(_translate("MainWindow", "Film poster URL"))
        self.title_check.setText(_translate("MainWindow", "Film title"))
        self.description_check.setText(_translate("MainWindow", "Description"))
        self.director_check.setText(_translate("MainWindow", "Director"))
        self.year_check.setText(_translate("MainWindow", "Release year"))
        self.cast_check.setText(_translate("MainWindow", "Cast"))
        self.csv_button.setText(_translate("MainWindow", ".csv"))
        self.txt_button.setText(_translate("MainWindow", ".txt"))
        self.json_button.setText(_translate("MainWindow", ".json"))
        self.settings_label.setText(_translate("MainWindow", "Please choose the data and file format you want."))
        self.enable_button.setText(_translate("MainWindow", "Enable all"))
        self.disable_button.setText(_translate("MainWindow", "Disable all"))
        self.url_groupbox.setTitle(_translate("MainWindow", "URL"))
        self.url_line.setPlaceholderText(_translate("MainWindow", "https://letterboxd.com/dave/list/official-top-250-narrative-feature-films/"))
        self.url_label.setText(_translate("MainWindow", "Enter the Letterboxd page URL that you wish to scrape data from:"))
        self.results_groupbox.setTitle(_translate("MainWindow", "Results"))
        self.scrapeButton.setText(_translate("MainWindow", "Start scraping"))
        self.exit_button.setText(_translate("MainWindow", "Exit"))

    def runLongTask(self):
        # Step 2: Create a QThread object
        self.thread = QThread()
        # Step 3: Create a worker object
        self.worker = Worker()
        # Step 4: Move worker to the thread
        self.worker.moveToThread(self.thread)
        # Step 5: Connect signals and slots
        self.thread.started.connect(self.worker.run)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)
        #self.worker.progress.connect(self.reportProgress) <----------
        # Step 6: Start the thread
        self.thread.start()

        # Final resets
        #self.longRunningBtn.setEnabled(False) <-------------
        #self.thread.finished.connect(
        #    lambda: self.longRunningBtn.setEnabled(True)
        #)
        #self.thread.finished.connect(
        #    lambda: self.stepLabel.setText("Long-Running Step: 0")
        #)



# Creating worker thread with QThread
class Worker(QObject):
    finished = pyqtSignal()
    progress = pyqtSignal(int)

    def run(self):
        """Long-running task."""
        for i in range(5):
            time.sleep(1)
            self.progress.emit(i + 1)
        self.finished.emit()

"""
class Window(QtWidgets.QMainWindow):
    # Snip...
    def runLongTask(self):
        # Step 2: Create a QThread object
        self.thread = QThread()
        # Step 3: Create a worker object
        self.worker = Worker()
        # Step 4: Move worker to the thread
        self.worker.moveToThread(self.thread)
        # Step 5: Connect signals and slots
        self.thread.started.connect(self.worker.run)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)
        self.worker.progress.connect(self.reportProgress)
        # Step 6: Start the thread
        self.thread.start()

        # Final resets
        self.longRunningBtn.setEnabled(False)
        self.thread.finished.connect(
            lambda: self.longRunningBtn.setEnabled(True)
        )
        self.thread.finished.connect(
            lambda: self.stepLabel.setText("Long-Running Step: 0")
        )
"""

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    
    sys.exit(app.exec_())
